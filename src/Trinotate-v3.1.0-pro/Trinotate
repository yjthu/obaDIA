#!/usr/bin/env perl

use strict;
use warnings;
use FindBin;

my $usage = <<_EOUSAGE_;


   usage: $0 <sqlite.db> <command> <input> [...]


     <commands>: 

         * Initial import of transcriptome and protein data:

             init --gene_trans_map <file> --transcript_fasta <file> --transdecoder_pep <file>

         * Transdecoder protein search results:

             LOAD_swissprot_blastp <file>
             LOAD_pfam <file>
             LOAD_tmhmm <file>
             LOAD_signalp <file>

          * Trinity transcript search results:

             LOAD_swissprot_blastx <file>
             LOAD_rnammer <file>
             

          * Load custom blast results using any searchable database


             LOAD_custom_blast --outfmt6 <file> --prog <blastp|blastx> --dbtype <database_name>


          * report generation:

             report [ -E (default: 1e-5) ] [--pfam_cutoff DNC|DGC|DTC|SNC|SGC|STC (default: DNC=domain noise cutoff)]


_EOUSAGE_

;

unless (scalar @ARGV >= 2) { die $usage; }

my $sqlite_db = shift @ARGV;
my $command = shift @ARGV;

unless (-s $sqlite_db) {
    die "Error, cannot locate $sqlite_db database file. Be sure it's in your current directory.";
}

if ($command ne 'report' && ! @ARGV) {
    die $usage . "\n\nMissing parameter.\n\n";
}

my %commands = map { + $_ => 1 } qw(LOAD_swissprot_blastp LOAD_swissprot_blastx 
                                    LOAD_pfam LOAD_tmhmm LOAD_signalp LOAD_rnammer 
                                    LOAD_custom_blast
                                    report init);

unless (exists $commands{$command}) {
    die "$usage\nError, do not recognize command: $command\n";
}

my $util_dir = "$FindBin::RealBin/util";
my $loaders_dir = "$util_dir/trinotateSeqLoader";

unless (@ARGV) {
    @ARGV = (""); # to avoid error messages inusing $ARGV[0] below
}

my %command_to_params = ( 
                          # protein-based
                          'LOAD_swissprot_blastp' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db --outfmt6 $ARGV[0] --prog blastp --dbtype Swissprot",
                          'LOAD_trembl_blastp' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db --outfmt6 $ARGV[0] --prog blastp --dbtype TrEMBL",
                          'LOAD_pfam'  => "$loaders_dir/Trinotate_PFAM_loader.pl --sqlite $sqlite_db --pfam $ARGV[0]",
                          'LOAD_tmhmm' => "$loaders_dir/Trinotate_TMHMM_loader.pl --sqlite $sqlite_db --tmhmm $ARGV[0]",
                          'LOAD_signalp' => "$loaders_dir/Trinotate_SIGNALP_loader.pl --sqlite $sqlite_db --signalp $ARGV[0]",
                          
                          # transcript-based
                          'LOAD_swissprot_blastx' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db --outfmt6 $ARGV[0] --prog blastx --dbtype Swissprot",
                          'LOAD_trembl_blastx' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db --outfmt6 $ARGV[0] --prog blastx --dbtype TrEMBL",
                          'LOAD_rnammer' => "$loaders_dir/Trinotate_RNAMMER_loader.pl --sqlite $sqlite_db --rnammer $ARGV[0]",
                          
                          # custom blast searches
                          'LOAD_custom_blast' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db @ARGV",
    
    
    );



if (my $cmd = $command_to_params{$command}) {
    &process_cmd($cmd);
}
elsif ($command eq "report") {
    ## generate Trinotate report.
    my $cmd = "$FindBin::RealBin/util/Trinotate_report_writer.pl --sqlite $sqlite_db @ARGV";
    &process_cmd($cmd);
    
}
elsif ($command eq "init") {
    # populate sequence and gene/trans/orf data
    my $cmd = "$FindBin::RealBin/util/trinotateSeqLoader/TrinotateSeqLoader.pl --sqlite $sqlite_db @ARGV --bulk_load";
    &process_cmd($cmd);
}
else {
    die "Error, do not recognize command: $command ";
}



exit(0);

####
sub process_cmd {
    my ($cmd) = @_;

    print STDERR "CMD: $cmd\n";
    my $ret = system($cmd);
    if ($ret) {
        die "Error, cmd: $cmd died with ret $ret";
    }

    return;
}
